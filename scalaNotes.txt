* call-by-value VS call-by-name
  def function(byValue : Int, byName : => Int) = ...

  def = by name
    def x = square(22) => evaluated at each use
  val = by value
    val x = square(22) => evaluated only once


  - def - defines an immutable label for the right side content which is lazily evaluated - evaluate by name + evaluated every time it gets accessed
        def can be overriden by val in subclasses, but not the other way around!
  - val - defines an immutable label for the right side content which is eagerly/immediately evaluated - evaluated by value.
  - lazy lav - evaluated lazily + properly only once + if you get exception during evaluation then another access will try to reevaluate it
  - var - defines a mutable variable, initially set to the evaluated right side content.


* lexical scope
  { ... } = is an expression!
  definitions from outside the block are visible inside the block
  definitions inside the block shadows definitions from outside the block
  definitions inside the block are not visible outside the block

* Multiple parameter lists - shortcut for function that return a function - for currying
  def sum(f: Int => Int)(a: Int, b: Int): Int   ===   def sum(f: Int => Int): (Int, Int) => Int
  usage: sum (cube) (10, 20)

* Dynamic dispatch of methods is analogous to calls to higher-order function
    Open questions?
      - can we implement Objects in terms of higher-order functions?
      - can we implement higher-order functions in terms of objects?

* Class Hierarchy
  Any (methods: ==, !=, equals, hashCode, toString)
    - AnyVal = all value classes (primitive classes)
      -- Int
      -- Boolean
      -- Unit
    - AnyRef = alias (different name) for java.lang.Object
      -- ScalaObject
        -- other Scala classes
      -- other Java classes
  Nothing = inherits from every Any class, but also inherits from Null => there's no value of type Nothing
    1. To signal abnormal termination => function that throws exception or terminates the program
      type of expression "throw Exception" is Nothing
    2. As an element type of empty collections => Set[Nothing]
  Null = inherits from every AnyRef class => the type of the "null" value
    val s: String = null //OK
    val i: Int = null //Error: type mismatch (because Null is subtype of all AnyRef, and Int is AnyVal)

* Constructor with field definitions:
  class A(val i: Int) => is equivalent to class A(_i: Int) { val i = _i }
  Field definitions in classes are just special cases of methods and can override methods
  













Videos:
  * Panel on the Past, Present, and Future of Scala (1h15min) = https://www.youtube.com/watch?v=xUWNcL7NRxg
  * Spark -- the Ultimate Scala Collections (44min) = https://www.youtube.com/watch?v=NW5h8d_ZyOs


Diassembling Scala code:
  * javap -p => shows public and private members of the class
  * javap -c => shows implementation of the methods


????? For Future ?????
* Parallel Collections
* Distributed Collections
* Actors = Akka
* DSLs = scala parser combinators
  http://bitwalker.org/posts/2013-08-10-learn-by-example-scala-parser-combinators/
  https://wiki.scala-lang.org/display/SW/Parser+Combinators--Getting+Started
  https://github.com/scala/scala-parser-combinators/blob/1.0.x/docs/Getting_Started.md
  http://debasishg.blogspot.com/2008/04/external-dsls-made-easy-with-scala.html
